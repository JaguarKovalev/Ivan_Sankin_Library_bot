import asyncio
import logging
import sqlite3

from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup

from config import API_TOKEN

# –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–Ω–∏–≥–∏ –∏–∑ book.py –≤ –ë–î:
# from book import books as initial_books

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()
router = Router()

##############################################################################
# –ë–õ–û–ö –†–ê–ë–û–¢–´ –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–•
##############################################################################

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
conn = sqlite3.connect("database.sqlite3")
cursor = conn.cursor()

# –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
cursor.execute(
    """
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        name TEXT,
        surname TEXT,
        password TEXT,
        borrowed_books TEXT
    )
"""
)

# –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –∫–Ω–∏–≥ (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
cursor.execute(
    """
    CREATE TABLE IF NOT EXISTS books (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        title TEXT UNIQUE,
        author TEXT,
        available BOOLEAN,
        borrower TEXT
    )
"""
)

conn.commit()


def init_books_in_db():
    """
    –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è –µ–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–Ω–∏–≥–∏ –≤ —Ç–∞–±–ª–∏—Ü—É `books`,
    –µ—Å–ª–∏ –æ–Ω–∏ —Ç–∞–º –µ—â—ë –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã. –ú–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –µ—ë –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞.
    –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Å–ª–æ–≤–∞—Ä—å initial_books –≤ book.py.
    –ò–ª–∏ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–ø–∏—Å–∞—Ç—å –∫–Ω–∏–≥–∏ –ø—Ä—è–º–æ –∑–¥–µ—Å—å –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è.
    """
    # from book import books as initial_books
    initial_books = {
        "–í–æ–π–Ω–∞ –∏ –º–∏—Ä": {"author": "–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π", "available": True, "borrower": None},
        "–ü—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ": {
            "author": "–§–µ–¥–æ—Ä –î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π",
            "available": True,
            "borrower": None,
        },
        "–ú–∞—Å—Ç–µ—Ä –∏ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞": {
            "author": "–ú–∏—Ö–∞–∏–ª –ë—É–ª–≥–∞–∫–æ–≤",
            "available": True,
            "borrower": None,
        },
        # ... –î–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ ...
    }

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–∞–∫–∏–µ-—Ç–æ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ books
    cursor.execute("SELECT COUNT(*) FROM books")
    count = cursor.fetchone()[0]
    if count == 0:
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º initial_books
        for title, info in initial_books.items():
            cursor.execute(
                "INSERT INTO books (title, author, available, borrower) VALUES (?, ?, ?, ?)",
                (title, info["author"], info["available"], info["borrower"]),
            )
        conn.commit()


# –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –∫–Ω–∏–≥, —Å–Ω–∏–º–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:
# init_books_in_db()


##############################################################################
# FSM –°–æ—Å—Ç–æ—è–Ω–∏—è
##############################################################################


class LoginState(StatesGroup):
    waiting_for_name = State()
    waiting_for_surname = State()
    waiting_for_password = State()


class RegisterState(StatesGroup):
    waiting_for_name = State()
    waiting_for_surname = State()
    waiting_for_password = State()


class BookRequest(StatesGroup):
    waiting_for_book_name = State()


##############################################################################
# –ö–õ–ê–í–ò–ê–¢–£–†–´
##############################################################################

start_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîë –í–æ–π—Ç–∏")],
        [KeyboardButton(text="üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")],
    ],
    resize_keyboard=True,
)

menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìö –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥")],
        [KeyboardButton(text="üîç –ù–∞–π—Ç–∏ –∫–Ω–∏–≥—É"), KeyboardButton(text="üìñ –í–∑—è—Ç—å –∫–Ω–∏–≥—É")],
        [KeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"), KeyboardButton(text="üö™ –í—ã—Ö–æ–¥")],
    ],
    resize_keyboard=True,
)


##############################################################################
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
##############################################################################


def get_user_data(user_id: int):
    """
    –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict –∏–ª–∏ None, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç.
    """
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    if row:
        # row: (user_id, name, surname, password, borrowed_books)
        return {
            "user_id": row[0],
            "name": row[1],
            "surname": row[2],
            "password": row[3],
            "borrowed_books": row[4],  # CSV-—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ None
        }
    return None


def create_user(user_id: int, name: str, surname: str, password: str):
    """
    –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ users.
    borrowed_books –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±—É–¥–µ—Ç –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π.
    """
    cursor.execute(
        """
        INSERT INTO users (user_id, name, surname, password, borrowed_books)
        VALUES (?, ?, ?, ?, ?)
        """,
        (user_id, name, surname, password, ""),
    )
    conn.commit()


def update_user_borrowed_books(user_id: int, new_borrowed_books: str):
    """
    –û–±–Ω–æ–≤–ª—è–µ–º CSV-—Å—Ç—Ä–æ–∫—É —Å –ø–µ—Ä–µ—á–Ω–µ–º –≤–∑—è—Ç—ã—Ö –∫–Ω–∏–≥ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ.
    """
    cursor.execute(
        "UPDATE users SET borrowed_books = ? WHERE user_id = ?",
        (new_borrowed_books, user_id),
    )
    conn.commit()


def get_books_list() -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–Ω–∏–≥ –∏–∑ –ë–î –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    cursor.execute("SELECT title, author, available, borrower FROM books")
    rows = cursor.fetchall()

    if not rows:
        return "‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∫–Ω–∏–≥–∏."

    book_list = "–°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥:\n"
    for title, author, available, borrower in rows:
        if available:
            status = "‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞"
        else:
            status = f"‚ùå –ó–∞–Ω—è—Ç–∞ (–í–∑—è–ª: {borrower})"
        book_list += f"üìñ {title} - {author} ({status})\n"
    return book_list


def find_book_in_db(title: str):
    """
    –ò—â–µ–º –∫–Ω–∏–≥—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ—Ä—Ç–µ–∂ (title, author, available, borrower) –∏–ª–∏ None.
    """
    cursor.execute(
        "SELECT title, author, available, borrower FROM books WHERE title = ?",
        (title,),
    )
    return cursor.fetchone()


def set_book_borrowed(title: str, borrower: str):
    """
    –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, —á—Ç–æ –∫–Ω–∏–≥–∞ –≤–∑—è—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (available=False, borrower=...).
    """
    cursor.execute(
        "UPDATE books SET available = ?, borrower = ? WHERE title = ?",
        (False, borrower, title),
    )
    conn.commit()


def set_book_returned(title: str):
    """
    –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å, —á—Ç–æ –∫–Ω–∏–≥–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ (available=True, borrower=None).
    """
    cursor.execute(
        "UPDATE books SET available = ?, borrower = NULL WHERE title = ?",
        (True, title),
    )
    conn.commit()


async def check_registration(message: types.Message) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –ï—Å–ª–∏ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False.
    """
    user_id = message.from_user.id
    user = get_user_data(user_id)
    if not user:
        await message.answer(
            "‚õî –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º.",
            reply_markup=start_kb,
        )
        return False
    return True


##############################################################################
# –•–ï–ù–î–õ–ï–†–´ /start, –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –í—Ö–æ–¥
##############################################################################


@router.message(F.text == "/start")
async def send_welcome(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user = get_user_data(user_id)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏–ª–∏ –≤—Ö–æ–¥
    if not user:
        await message.answer(
            "üîπ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:\n\n- –í—Ö–æ–¥\n- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
            reply_markup=start_kb,
        )
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å ‚Äì –ø—Ä–æ—Å–∏–º –ø–∞—Ä–æ–ª—å
        await message.answer("üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞:", reply_markup=start_kb)
        await state.set_state(LoginState.waiting_for_password)


@router.message(F.text == "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
async def start_registration(message: types.Message, state: FSMContext):
    await message.answer("üîπ –î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(RegisterState.waiting_for_name)


@router.message(F.text == "üîë –í–æ–π—Ç–∏")
async def start_login(message: types.Message, state: FSMContext):
    await message.answer("üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(LoginState.waiting_for_name)


@router.message(RegisterState.waiting_for_name)
async def register_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(RegisterState.waiting_for_surname)


@router.message(RegisterState.waiting_for_surname)
async def register_surname(message: types.Message, state: FSMContext):
    await state.update_data(surname=message.text)
    await message.answer("–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å:")
    await state.set_state(RegisterState.waiting_for_password)


@router.message(RegisterState.waiting_for_password)
async def register_password(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∑–∞–ø–∏—Å—å
    if get_user_data(user_id):
        await message.answer(
            "‚õî –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Ö–æ–¥.", reply_markup=start_kb
        )
        await state.clear()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    user_data = await state.get_data()
    create_user(
        user_id=user_id,
        name=user_data["name"],
        surname=user_data["surname"],
        password=message.text,
    )

    await message.answer(
        "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å.", reply_markup=menu_kb
    )
    await state.clear()


@router.message(LoginState.waiting_for_name)
async def login_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(LoginState.waiting_for_surname)


@router.message(LoginState.waiting_for_surname)
async def login_surname(message: types.Message, state: FSMContext):
    await state.update_data(surname=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")
    await state.set_state(LoginState.waiting_for_password)


@router.message(LoginState.waiting_for_password)
async def check_password(message: types.Message, state: FSMContext):
    user_data_state = await state.get_data()
    name = user_data_state["name"]
    surname = user_data_state["surname"]
    password_input = message.text

    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏
    cursor.execute(
        """
        SELECT user_id, password FROM users
        WHERE name = ? AND surname = ?
        """,
        (name, surname),
    )
    row = cursor.fetchone()

    if row:
        user_id_db = row[0]
        password_db = row[1]
        if password_db == password_input:
            await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥, {name}!", reply_markup=menu_kb)
            await state.clear()
            return
    await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è, —Ñ–∞–º–∏–ª–∏—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


##############################################################################
# –õ–ò–ß–ù–´–ô –ö–ê–ë–ò–ù–ï–¢ / –í–´–•–û–î
##############################################################################


@router.message(F.text == "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def profile(message: types.Message, state: FSMContext):
    if not await check_registration(message):
        return

    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    if user_data:
        borrowed_books_csv = user_data["borrowed_books"]
        if borrowed_books_csv:
            borrowed_list = borrowed_books_csv.split(",")
            borrowed_books_str = ", ".join(borrowed_list)
        else:
            borrowed_books_str = "–ù–µ—Ç –≤–∑—è—Ç—ã—Ö –∫–Ω–∏–≥"

        await message.answer(
            f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n–ò–º—è: {user_data['name']}\n"
            f"–§–∞–º–∏–ª–∏—è: {user_data['surname']}\n\n"
            f"–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏:\n{borrowed_books_str}",
            reply_markup=menu_kb,
        )


@router.message(F.text == "üö™ –í—ã—Ö–æ–¥")
async def logout(message: types.Message, state: FSMContext):
    if not await check_registration(message):
        return

    user_id = message.from_user.id
    user_data = get_user_data(user_id)
    if user_data:
        await message.answer(
            "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥.",
            reply_markup=start_kb,
        )
        await state.clear()
    else:
        await message.answer("‚õî –í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥.")


##############################################################################
# –ö–ù–ò–ì–ò: –°–ü–ò–°–û–ö / –ü–û–ò–°–ö / –í–ó–Ø–¢–¨
##############################################################################


@router.message(F.text == "üìö –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥")
async def list_books_handler(message: types.Message):
    book_list = get_books_list()
    await message.answer(book_list)


@router.message(F.text == "üîç –ù–∞–π—Ç–∏ –∫–Ω–∏–≥—É")
async def ask_for_book(message: types.Message, state: FSMContext):
    if not await check_registration(message):
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏:")
    await state.set_state(BookRequest.waiting_for_book_name)


@router.message(BookRequest.waiting_for_book_name)
async def find_book(message: types.Message, state: FSMContext):
    book_title = message.text.strip()
    row = find_book_in_db(book_title)

    if row:
        title, author, available, borrower = row
        status = (
            "‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞" if available else f"‚ùå –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∞ (–†–µ–∑–µ—Ä–≤: {borrower})"
        )
        response = f"üìñ {title} - {author}\n–°—Ç–∞—Ç—É—Å: {status}"
    else:
        response = "‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ."

    await message.answer(response)
    await state.clear()


@router.message(F.text == "üìñ –í–∑—è—Ç—å –∫–Ω–∏–≥—É")
async def borrow_book_request(message: types.Message, state: FSMContext):
    if not await check_registration(message):
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å:")
    await state.set_state(BookRequest.waiting_for_book_name)


@router.message(BookRequest.waiting_for_book_name)
async def borrow_book(message: types.Message, state: FSMContext):
    if not await check_registration(message):
        return

    title = message.text.strip()
    row = find_book_in_db(title)
    user_id = message.from_user.id
    user_data = get_user_data(user_id)

    if not row:
        await message.answer("–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ.")
        await state.clear()
        return

    # row = (title, author, available, borrower)
    _, _, available, borrower = row

    if available:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–∏–≥—É
        borrower_str = f"{user_data['name']} {user_data['surname']}"
        set_book_borrowed(title, borrower_str)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (CSV)
        borrowed_csv = user_data["borrowed_books"] or ""
        borrowed_list = borrowed_csv.split(",") if borrowed_csv else []
        borrowed_list = [x for x in borrowed_list if x]  # –ù–∞ —Å–ª—É—á–∞–π –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
        borrowed_list.append(title)
        new_borrowed_csv = ",".join(borrowed_list)
        update_user_borrowed_books(user_id, new_borrowed_csv)

        await message.answer(
            f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–ª–∏ –∫–Ω–∏–≥—É ¬´{title}¬ª. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–µ—Ä–Ω—É—Ç—å –µ—ë –≤–æ–≤—Ä–µ–º—è!"
        )
    else:
        await message.answer("–≠—Ç–∞ –∫–Ω–∏–≥–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞.")

    await state.clear()


##############################################################################
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
##############################################################################


async def main():
    dp.include_router(router)
    await dp.start_polling(bot, skip_updates=True)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("Exit")
