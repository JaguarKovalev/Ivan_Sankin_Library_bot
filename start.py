import asyncio
import logging
import sqlite3

import openpyxl
from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup

from book import books
from config import API_TOKEN

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()
router = Router()


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect("database.sqlite3")
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
cursor.execute(
    """
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        name TEXT,
        surname TEXT,
        password TEXT,
        borrowed_books TEXT
    )
"""
)
conn.commit()

# –ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏/–≤—Ö–æ–¥–∞
start_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üîë –í–æ–π—Ç–∏")],
        [KeyboardButton(text="üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")],
    ],
    resize_keyboard=True,
)

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìö –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥")],
        [KeyboardButton(text="üîç –ù–∞–π—Ç–∏ –∫–Ω–∏–≥—É"), KeyboardButton(text="üìñ –í–∑—è—Ç—å –∫–Ω–∏–≥—É")],
        [KeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"), KeyboardButton(text="üö™ –í—ã—Ö–æ–¥")],
    ],
    resize_keyboard=True,
)


class LoginState(StatesGroup):
    waiting_for_name = State()
    waiting_for_surname = State()
    waiting_for_password = State()


class RegisterState(StatesGroup):
    waiting_for_name = State()
    waiting_for_surname = State()
    waiting_for_password = State()


class BookRequest(StatesGroup):
    waiting_for_book_name = State()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ Excel
def save_to_excel():
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–∏–≥—É Excel
    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "Users"

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
    ws.append(["User ID", "Name", "Surname", "Password", "Borrowed Books"])

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for user_id, data in users.items():
        borrowed_books = ", ".join(data["borrowed_books"])
        ws.append(
            [user_id, data["name"], data["surname"], data["password"], borrowed_books]
        )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    wb.save("Excel/users_data.xlsx")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥
def get_books_list():
    book_list = "–°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥:\n"
    for title, info in books.items():
        status = (
            "‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞"
            if info["available"]
            else f"‚ùå –ó–∞–Ω—è—Ç–∞ (–í–∑—è–ª: {info['borrower']})"
        )
        book_list += f"üìñ {title} - {info['author']} ({status})\n"
    return book_list


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –≤—Ö–æ–¥
async def check_registration(message: types.Message):

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    cursor.execute("SELECT * FROM users WHERE user_id = ?", (message.from_user.id,))
    user = cursor.fetchone()
    if user:
        users[message.from_user.id] = {
            "name": user[1],
            "surname": user[2],
            "password": user[3],
            "borrowed_books": user[4],
        }

    user_id = message.from_user.id
    if user_id not in users:
        await message.answer(
            "‚õî –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º.",
            reply_markup=start_kb,
        )
        return False
    return True


@router.message(F.text == "/start")
async def send_welcome(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if user_id not in users:
        await message.answer(
            "üîπ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:\n\n- –í—Ö–æ–¥\n- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
            reply_markup=start_kb,
        )
    else:
        await message.answer("üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞:", reply_markup=start_kb)
        await state.set_state(LoginState.waiting_for_password)


@router.message(F.text == "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
async def start_registration(message: types.Message, state: FSMContext):
    await message.answer("üîπ –î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(RegisterState.waiting_for_name)


@router.message(F.text == "üîë –í–æ–π—Ç–∏")
async def start_login(message: types.Message, state: FSMContext):
    await message.answer("üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(LoginState.waiting_for_name)


@router.message(RegisterState.waiting_for_name)
async def register_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(RegisterState.waiting_for_surname)


@router.message(RegisterState.waiting_for_surname)
async def register_surname(message: types.Message, state: FSMContext):
    await state.update_data(surname=message.text)
    await message.answer("–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å:")
    await state.set_state(RegisterState.waiting_for_password)


@router.message(RegisterState.waiting_for_password)
async def register_password(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if user_id in users:
        await message.answer(
            "‚õî –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Ö–æ–¥.", reply_markup=start_kb
        )
        await state.clear()
        return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
    user_data = await state.get_data()
    users[user_id] = {
        "name": user_data["name"],
        "surname": user_data["surname"],
        "password": message.text,
        "borrowed_books": [],
    }

    await message.answer(
        "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å.", reply_markup=menu_kb
    )
    await state.clear()


@router.message(LoginState.waiting_for_name)
async def login_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(LoginState.waiting_for_surname)


@router.message(LoginState.waiting_for_surname)
async def login_surname(message: types.Message, state: FSMContext):
    await state.update_data(surname=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")
    await state.set_state(LoginState.waiting_for_password)


@router.message(LoginState.waiting_for_password)
async def check_password(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    name = user_data["name"]
    surname = user_data["surname"]
    password = message.text

    user = next(
        (u for u in users.values() if u["name"] == name and u["surname"] == surname),
        None,
    )

    if user and user["password"] == password:
        await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥, {name}!", reply_markup=menu_kb)
        await state.clear()
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è, —Ñ–∞–º–∏–ª–∏—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


@router.message(F.text == "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def profile(message: types.Message, state: FSMContext):
    if not await check_registration(message):
        return

    user_id = message.from_user.id
    if user_id in users:
        user = users[user_id]
        borrowed_books = (
            ", ".join(user["borrowed_books"])
            if user["borrowed_books"]
            else "–ù–µ—Ç –≤–∑—è—Ç—ã—Ö –∫–Ω–∏–≥"
        )
        await message.answer(
            f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n–ò–º—è: {user['name']}\n–§–∞–º–∏–ª–∏—è: {user['surname']}\n\n–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏:\n{borrowed_books}",
            reply_markup=menu_kb,
        )


@router.message(F.text == "üö™ –í—ã—Ö–æ–¥")
async def logout(message: types.Message, state: FSMContext):
    if not await check_registration(message):
        return

    user_id = message.from_user.id
    if user_id in users:
        await message.answer(
            "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã. –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥.",
            reply_markup=start_kb,
        )
        await state.clear()
    else:
        await message.answer("‚õî –í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ —Å–∏—Å—Ç–µ–º—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥.")


@router.message(F.text == "üìö –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥")
async def list_books(message: types.Message):
    book_list = get_books_list()
    await message.answer(book_list)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üîç –ù–∞–π—Ç–∏ –∫–Ω–∏–≥—É"
@router.message(F.text == "üîç –ù–∞–π—Ç–∏ –∫–Ω–∏–≥—É")
async def ask_for_book(message: types.Message, state: FSMContext):
    if not await check_registration(message):
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏:")
    await state.set_state(BookRequest.waiting_for_book_name)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏
@router.message(BookRequest.waiting_for_book_name)
async def find_book(message: types.Message, state: FSMContext):
    book_title = message.text.strip()

    if book_title in books:
        book_info = books[book_title]
        status = (
            "‚úÖ –î–æ—Å—Ç—É–ø–Ω–∞"
            if book_info["available"]
            else f"‚ùå –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∞ (–†–µ–∑–µ—Ä–≤: {book_info['borrower']})"
        )
        response = f"üìñ {book_title} - {book_info['author']}\n–°—Ç–∞—Ç—É—Å: {status}"
    else:
        response = "‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ."

    await message.answer(response)
    await state.clear()


@router.message(F.text == "üìñ –í–∑—è—Ç—å –∫–Ω–∏–≥—É")
async def borrow_book_request(message: types.Message, state: FSMContext):
    if not await check_registration(message):
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å:")
    await state.set_state(BookRequest.waiting_for_book_name)


@router.message(BookRequest.waiting_for_book_name)
async def borrow_book(message: types.Message, state: FSMContext):
    if not await check_registration(message):
        return

    title = message.text.strip()

    if title in books and books[title]["available"]:
        books[title]["available"] = False
        user_id = message.from_user.id
        users[user_id]["borrowed_books"].append(title)
        books[title][
            "borrower"
        ] = f"{users[user_id]['name']} {users[user_id]['surname']}"
        await message.answer(
            f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–ª–∏ –∫–Ω–∏–≥—É '{title}'. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–µ—Ä–Ω—É—Ç—å –µ—ë –≤–æ–≤—Ä–µ–º—è!"
        )
        save_to_excel()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Excel –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    elif title in books:
        await message.answer("–≠—Ç–∞ –∫–Ω–∏–≥–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞.")
    else:
        await message.answer("–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ.")

    await state.clear()


async def main():
    dp.include_router(router)
    await dp.start_polling(bot, skip_updates=True)


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é main –≤ —Ü–∏–∫–ª–µ —Å–æ–±—ã—Ç–∏–π asyncio
    try:
        asyncio.run(main())
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C)
    except KeyboardInterrupt:
        print("Exit")
